<?php

/**
 * Copyright (c) 2023-2024, Felix Jahn
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * @see https://github.com/oruborus/harness262
 */

declare(strict_types=1);

use Oru\Harness\ArgumentsParser\InputArgumentsParser;
use Oru\Harness\EngineFactory\GenericEngineFactory;
use Oru\Harness\Harness;
use Oru\Harness\Output\OutputAdapter;
use Oru\Harness\Printer\NormalPrinter;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

include './vendor/autoload.php';

(new SingleCommandApplication('Harness'))
    ->addArgument('paths', InputArgument::IS_ARRAY | InputArgument::REQUIRED, 'paths')
    // FIXME: Remove the global option '--no-interaction' as it is blocking the short option '-n' from '--no-cache'
    ->addOption('no-cache', /*'n'*/ null)
    ->addOption('silent', 's')
    ->addOption('debug', null)
    ->addOption('include', null, InputOption::VALUE_REQUIRED, 'regex pattern of the paths to include')
    ->addOption('exclude', null, InputOption::VALUE_REQUIRED, 'regex pattern of the paths to exclude')
    ->addOption('stop-on-defect', null)
    ->addOption('stop-on-error', null)
    ->addOption('stop-on-failure', null)
    ->addOption('concurrency', 'c', InputOption::VALUE_REQUIRED, 'amount of concurrent threads')
    ->addOption('strict', null)
    ->addOption('timeout', null, InputOption::VALUE_REQUIRED, 'timeout in seconds')
    ->addOption('loose', null)
    ->addOption('only-strict', null)
    ->addOption('no-strict', null)
    ->addOption('module', null)
    ->addOption('async', null)
    ->addOption('raw', null)
    ->setCode(
        function (InputInterface $input, OutputInterface $output): int {
            $engineFactory   = new GenericEngineFactory(realpath('./Harness.php'));
            $argumentsParser = new InputArgumentsParser($input);
            $printer         = new NormalPrinter(new OutputAdapter($output));

            return (new Harness($engineFactory, $argumentsParser, $printer))->run();
        }
    )->run();
