<?php

/**
 * Copyright (c) 2023-2024, Felix Jahn
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * @see https://github.com/oruborus/harness262
 */

declare(strict_types=1);

use Oru\Harness\ArgumentsParser\CliArgumentsParser;
use Oru\Harness\ArgumentsParser\Exception\InvalidOptionException;
use Oru\Harness\ArgumentsParser\Exception\UnknownOptionException;
use Oru\Harness\EngineFactory\GenericEngineFactory;
use Oru\Harness\Harness;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\SingleCommandApplication;

include './vendor/autoload.php';

(new SingleCommandApplication('Harness'))
    ->addArgument('paths', InputArgument::IS_ARRAY | InputArgument::REQUIRED, 'paths')
    // FIXME: Remove the global option '--no-interaction' as it is blocking the short option '-n' from '--no-cache'
    ->addOption('no-cache', /*'n'*/ null)
    ->addOption('silent', 's')
    ->addOption('debug', null)
    ->addOption('include', null, InputOption::VALUE_REQUIRED, 'regex pattern of the paths to include')
    ->addOption('exclude', null, InputOption::VALUE_REQUIRED, 'regex pattern of the paths to exclude')
    ->addOption('stop-on-defect', null)
    ->addOption('stop-on-error', null)
    ->addOption('stop-on-failure', null)
    ->addOption('concurrency', 'c', InputOption::VALUE_REQUIRED, 'amount of concurrent threads')
    ->addOption('strict', null)
    ->addOption('timeout', null, InputOption::VALUE_REQUIRED, 'timeout in seconds')
    ->addOption('loose', null)
    ->addOption('only-strict', null)
    ->addOption('no-strict', null)
    ->addOption('module', null)
    ->addOption('async', null)
    ->addOption('raw', null)
    ->setCode(
        /** 
         * @throws InvalidOptionException
         * @throws UnknownOptionException
         */
        function () use ($argv): int {
            $engineFactory   = new GenericEngineFactory(realpath('./Harness.php'));

            $arguments = $argv;
            array_shift($arguments);

            $argumentsParser = new CliArgumentsParser($arguments, [
                'no-cache'        => 'n',
                'silent'          => 's',
                'verbose'         => 'v',
                'debug'           => null,
                'include'         => ':',
                'exclude'         => ':',
                'stop-on-defect'  => null,
                'stop-on-error'   => null,
                'stop-on-failure' => null,
                'concurrency'     => 'c:',
                'strict'          => null,
                'timeout'         => ':',
                'loose'           => null,
                'only-strict'     => null,
                'no-strict'       => null,
                'module'          => null,
                'async'           => null,
                'raw'             => null,
            ]);

            return (new Harness($engineFactory, $argumentsParser))->run();
        }
    )->run();
